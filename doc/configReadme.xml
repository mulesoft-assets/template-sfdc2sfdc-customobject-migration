<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce Custom Object Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to migrate custom objects from one Salesforce organization to another one.

This template serves as a foundation for the process of migrating custom objects from one Salesforce instance to another, being able to specify filtering criteria and desired behavior when a custom object already exists in the destination org. 

As implemented, this Template leverages the Mule batch module.

The batch job is divided in *Process* and *On Complete* stages.

Migration process starts from fetching all the existing custom objects that match the filter criteria from Salesforce Org A.

Next each Salesforce Custom Object is filtered depending on if it has an existing matching custom object in the Salesforce Org B.

The last step of the *Process* stage groups the custom objects and create them in Salesforce Org B.

Finally during the *On Complete* stage the Template will both output statistics data into the console and send a notification email with the results of the batch execution. 

The template is covered by the integration tests using the [MUnit](https://docs.mulesoft.com/munit). To be able to run the tests, see the example configuration of the test property file.
		</section>
		<section id="considerations">

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for the template to run smoothly. 
**Failing to do so could lead to unexpected behavior of the template.**

## Create the Custom Object schemas in both organizations &lt;a name="createcustomobjects" /&gt;

In order to run the Template as is, you'll need to create the custom objects provided in your Salesforce accounts. In order to do so, [please follow the steps documented in Salesforce documentation](http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_qs_customobject.htm).

The custom objects and custom fields created for this application are the following:
1. Salesforce org A
MusicAlbum
	interpreter
	year
2. Salesforce org B
MusicAlbum
	interpreter
	genre

**Note:** Please, take into account that this sample application uses Salesforce Object Query Language which, when querying for custom objects and fields, requires you to append `__c` to your query. So for example, to query the music albums' interptreters, the query would be this way: `SELECT interpreter__c FROM MusicAlbum__c`.

		</section>
		<section id="running_on_cloudhub">

Once your app is all set and started, supposing you choose as domain name `sfdccustomobjectmigration` to trigger the use case you just need to browse to `http://sfdccustomobjectmigration.cloudhub.io/migratecustomobjects` and report will be sent to the emails configured.

		</section>
		<section id="running_on_standalone">

After this, to trigger the use case you just need to browse to the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/migratecustomobjects` and this will create a CSV report and send it to the mails set.

		</section>
		<section id="application_configuration">
		
**HTTP Connector Configuration**
+ http.port `9090`

**Batch Aggregator Configuration**
+ page.size `1000`

**Salesforce Connector configuration for company A**
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Salesforce Connector configuration for company B**
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`

**SMTP Services Configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `email%40example.com`
+ smtp.password `password`

**Email Details**
+ mail.from `batch.contact.migration%40mulesoft.com`
+ mail.to `your.email@gmail.com`
+ mail.subject `Batch Job Finished Report`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The template calls to the API can be calculated using the formula:

***1 + X + X / ${page.size}***

Being ***X*** the number of Custom Objects to be synchronized on each run. 

The division by ***${page.size}*** is because, by default, Custom Objects are gathered in groups of ${page.size} for each Upsert API Call in the commit step.

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).

		</section>
		<section id="default_endpoints_xml">
		
This file provides the inbound and outbound sides of your integration app.
This Template has only an [HTTP Inbound Endpoint](http://www.mulesoft.org/documentation/display/current/HTTP+Endpoint+Reference) as the way to trigger the use case.

$H$H#  Inbound Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `migratecustomobjects` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
+ The endpoint is configured as a *request-response* since as a result of calling it the response will be the total of custom objects migrated and filtered by the criteria specified.

		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of excecuting the logic.
For the purpose of this particular Template the *mainFlow* uses a batch job, which handles all the logic of it.

		</section>
	</sections>
</configuration>
<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<munit:config name="test-suite.xml" doc:name="MUnit configuration"/>
	<configuration-properties doc:name="Configuration properties" doc:id="c382dc50-b83c-41be-ad31-42ccb929d758" file="mule.test.properties" />
	<munit:before-test name="test-suiteBefore_Test" description="Before tests actions" doc:id="7f8facb1-95ae-4456-9448-faf3a3a89dc9" >
		<ee:transform doc:name="Prepare common testing data" doc:id="56fa411a-80a7-43b8-b8b6-1f1f45758545" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="testInterpreter1" ><![CDATA[%dw 2.0
output application/java
---
{
	interpreter__c: "test" ++ (uuid() splitBy("-"))[0] ++ "Interpreter",
	Name: "test" ++ (uuid() splitBy("-"))[0] ++ "Name",
	year__c: 1990
}
]]></ee:set-variable>
				<ee:set-variable variableName="testInterpreter2" ><![CDATA[%dw 2.0
output application/java
---
{
	interpreter__c: "test" ++ (uuid() splitBy("-"))[0] ++ "Interpreter",
	Name: "test" ++ (uuid() splitBy("-"))[0] ++ "Name",
	year__c: 1960
}
]]></ee:set-variable>
				<ee:set-variable variableName="testInterpreter3" ><![CDATA[%dw 2.0
output application/java
---
{
	interpreter__c: "test" ++ (uuid() splitBy("-"))[0] ++ "Interpreter",
	Name: "test" ++ (uuid() splitBy("-"))[0] ++ "Name",
	year__c: 1998
}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<salesforce:create type="MusicAlbum__c" doc:name="Create Customobject in instance A" doc:id="d62c8e61-71a7-43f3-8aa0-b4b5cb5359a4" config-ref="Salesforce_Sfdc_configA">
			<salesforce:records ><![CDATA[#[[vars.testInterpreter1, vars.testInterpreter2, vars.testInterpreter3]]]]></salesforce:records>
		</salesforce:create>
		<ee:transform doc:name="Store IDs and Prepare testing data in instance B" doc:id="69ffb93b-8e2c-4c34-9eb2-9f932ce99aab" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[
{
	Name: vars.testInterpreter3.Name,
	interpreter__c: "test" ++ (uuid() splitBy("-"))[0] ++ "Interpreter",
	year__c: 1982
}
]
]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="sfdcAIds" ><![CDATA[%dw 2.0
output application/java
---
payload map ($.id)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<salesforce:create doc:name="Create Customobject in instance B" doc:id="eec5baea-785d-4433-ad52-ae00bdc6b384" config-ref="Salesforce_Sfdc_configB" type="MusicAlbum__c"/>
		<set-variable value="#[payload map ($.id)]" doc:name="Store IDs to variable sfdcBIds" doc:id="9e874dae-1b06-439d-b615-148c7aef7a69" variableName="sfdcBIds"/>
		<munit-tools:mock-when doc:name="Mock email processor to avoid sending email" doc:id="17ab3357-3f08-4456-9f14-c41c281e06f1" processor="email:send">
				<munit-tools:then-return />
			</munit-tools:mock-when>
	</munit:before-test>
	<munit:test name="test-suite-mainFlowTest" description="Test" doc:id="4ffcda90-21bf-4cd4-9460-09cf6ca578e5" >
		<munit:execution >
			<flow-ref doc:name="Call queryFlow" doc:id="263dc79e-3934-4c42-b3f7-513ed540e613" name="queryFlow"/>
			<ee:transform doc:name="Filter test records" doc:id="3b2f79da-79d8-430d-a35e-b7dd6f90b53a" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testInterpreter1.Name 
	or $.Name == vars.testInterpreter2.Name
	or $.Name == vars.testInterpreter3.Name
)]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<flow-ref doc:name="Call businessLogicFlow" doc:id="f267a593-0908-4292-9a5b-521b2ccdc23c" name="businessLogicFlow"/>
			<scripting:execute doc:name="Sleep for 10s until the processing is completed" doc:id="b09fe305-3000-4571-b824-8b555395ccb7" engine="groovy">
				<scripting:code >sleep(10000)</scripting:code>
			</scripting:execute>
			<salesforce:query doc:name="Query test records" doc:id="bfe557e1-98d0-493f-adf2-45dbe2ca140b" config-ref="Salesforce_Sfdc_configB">
				<salesforce:salesforce-query >SELECT Id , Name, interpreter__c FROM MusicAlbum__c WHERE Name IN ( ':name1', ':name2', ':name3')</salesforce:salesforce-query>
				<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"name1" : vars.testInterpreter1.Name,
	"name2" : vars.testInterpreter2.Name,
	"name3" : vars.testInterpreter3.Name
}]]]></salesforce:parameters>
			</salesforce:query>
			<ee:transform doc:name="Filter records and save to variables" doc:id="0f2c8339-54a7-439d-95d1-3593caa582b5" >
				<ee:message >
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="createdRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testInterpreter1.Name)]]></ee:set-variable>
					<ee:set-variable variableName="updatedRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testInterpreter3.Name
	and $."interpreter__c" == vars.testInterpreter3."interpreter__c"
)]]></ee:set-variable>
					<ee:set-variable variableName="noRecord" ><![CDATA[%dw 2.0
output application/java
---
payload filter ($.Name == vars.testInterpreter2.Name)]]></ee:set-variable>
					<ee:set-variable variableName="sfdcBIds" ><![CDATA[%dw 2.0
output application/java
---
payload map ($.Id)]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that Contact was not migrated" doc:id="1e559409-a86b-47b9-bb44-cbcac54c4ade" expression="#[vars.noRecord[0].Name]" is="#[MunitTools::nullValue()]" message="Contact shouldn't be migrated" />
			<munit-tools:assert-that doc:name="Assert that Contact was created" doc:id="a8f4453a-10c6-4508-8ecf-64cc08e6129c" expression="#[vars.createdRecord[0].Name]" is="#[MunitTools::notNullValue()]" message="Contact should be migrated"/>
			<munit-tools:assert-that doc:name="Assert that Contact was updated" doc:id="e672228f-5afa-40aa-acbc-d6dd8afe1e55" expression="#[vars.updatedRecord[0].Name]" is="#[MunitTools::notNullValue()]" message="Contact should be updated"/>
			<munit-tools:verify-call doc:name="Verify Salesforce Upsert call" doc:id="126f0bf5-65ee-4ab4-9073-fd4cccf7f439" processor="salesforce:upsert" times="1"/>
		</munit:validation>
	</munit:test>
	<munit:after-test name="test-suiteAfter_Test" description="After tests actions" doc:id="5b85bb9e-67e6-47f7-8f71-53a39f147fc8" >
		<salesforce:delete doc:name="Delete source Customobject in instance A" doc:id="788956ca-8ada-49c2-a3f7-7eb367e735b4" config-ref="Salesforce_Sfdc_configA">
				<salesforce:delete-ids><![CDATA[#[vars.sfdcAIds]]]></salesforce:delete-ids>
			</salesforce:delete>
		<salesforce:delete doc:name="Delete source Customobject in instance B" doc:id="284bea48-594f-4fac-b08a-cdcaf0b2b3e8" config-ref="Salesforce_Sfdc_configB">
			<salesforce:delete-ids ><![CDATA[#[vars.sfdcBIds]]]></salesforce:delete-ids>
		</salesforce:delete>
	</munit:after-test>
	


</mule>

